Arrays:
    Easy: [
        Moores voting algorithm,
        Accumulate paris by adding previous as encounter new
    ]

    Medium: [
        bucketSort for k frequent numbers,
        use pre/postfix products/sums,
        to find consecutive sequences find leftmost in hashSet,
        palindromes use asscci and post/prefix hashes
    ]

    Easy: Designs, 205?, 1758?
    Medium: 799?, 1291?
    Hard: 1074?, 2306?
    Tricks: e1913, m179, m304, m665, m838, m2870, m2971



Two Pointers:
    Medium: [
        Update pointers instead of using a Set,
        subsequence vs subsets - may be multiple copies b/c of index,
        rotate array - there may be more than 1 independent cycle,
        for n-matrix rotations use reversing or reflection/transpose,
    ]

    Medium: 1498
    Tricks: e844



Sliding Window: 
    Medium: [
        Sometimes not necessary to decrease window,
        double the input and search window,
        search inner/outer window,
    ]

    Hard: [
        Use a count to compare dict matches,
        double ended queue
    ]

    Hard: 2009?
    Tricks: m713, m1888



Stack:
    Medium: [
        Iterate through backwards and forwards with checks,
        Monotomic does not calculate for current
    ]

    Medium: 456?, 907?
    Hard: 84?
    Tricks: e232, h895



Binary Search:
    Easy: [
        Search for the largest not the smallest value,
        good for guessing numbers,
    ]

    Medium: [
        Use when answer has a numeric upper bound,
        if searching i < i + 1 use left < right b/c left != right,
        find pivot index,
    ]

    Medium: 81?
    Hard: 4!
    Tricks: m116, m1268, m2616



LinkedList:
    Easy: [
        floyds - use while next = fast?.next
        Cyclical search switch lists variable once nil reached
    ]

    Medium: [
        Reverse list during tortoise-hare if can expand middle to sides,
        try separating 1 loop into 2
    ]

    Medium: 138?, 146?
    Hard: 460!
    Tricks: e160, m287



Trees:
    Easy: [
        Space complexity for recursion is logn...n || h,
        Use while loops and current to go left deep on traversal,
        Keep a previous node for bst traversal comparison,
        Use two pointers on array to build tree,
    ]

    Medium: [
        For BST try binary search,
        For BST delete replace value with leftmost right,
        Use index for post/pre tree construction
        Run both flipped and unflipped,
    ]

    Medium: 106?, 96, 95, 450?, 337?, 894?, 979, 988?, 1361?
    Hard: 297?
    Tricks: m173, m662



Heap: 
    Medium: [
        Only have the heap hold the amount needed,
        Use a queue to hold temporary heap pops,
        When there is a best (k) to choose use a heap,
        When items need to be in queue use heap,
        Use 2 heaps,
    ]
    
    Medium: 1405?
    Hard: 857, 1425, 1675
    Tricks: m1094



BackTracking:
    [
        Be carful with for loops maybe cause duplicate branches,
        Best to use for loops in BackTracking if array available,
        Add to result as its array is being build,
        sort array to avoid duplicates and skip if previous ==,
        DP may not be possible even for same inputs if parents differ,
        during sort/build-array try minimize recursive calls,
        copying array takes n time,
    ]

    Medium: 698?, 2597?
    Hard: 140?



Tries: 
    Medium: [
        Add isEndOfWord = true to last letter node in insert
    ]

    Medium: 2707



Graphs:
    [
        Remember to check the entire island dont return instantly if not needed (&&), 
        If problem involves edges of grid try out to in instead,
        create a neightbors/edges array,
        topological sort, which order to take class,
        find all nodes a node can reach then compare
        bfs for shortest path,
        use an outside variable for dfs if tuple return,
        maybe pass in a parent node to avoid visited set,
        Khans algorithm
    ]

    Medium: 207?, 310?, 1129?, 785?
    Hard: 1857?
    Tricks: m323, m721, m1020, m399



Advanced Graphs:
    Prims/Kruskals: Minimum Spanning Tree vertices connected with least weight,
    Hierholzers

    Medium: 1584?, 787
    Hard: 332?, 269?, 2421!, 1579?
    Tricks: m2812, h2709



1D:
    [
        for palindromes expand outward even/odd,        
        Manachers algorithm,
        center expansion / back-forth,
        for subsequence use loop up to current i,
        iterate backwards to avoid multiple stacking changes,
        create sequential tab regardless if some are not in nums,
        for loop faster than skip/take with static i,
        remember LIS,
        Euclidian Algorithm
    ]

    Medium: 152?, 673?, 837?
    Hard: 691?, 1406, 1964?, 1359
    Tricks: m91, m300, m416, m740, m983, m343, m2140, h472, h1799



2D: 
    [
        Time depends on params b/c memo only visit each combo once
        Bounded Knapsack,
        for combinations tab loop goes inside, memo -> index..<n
        for premutations tab first duplicates rearranged,
        dimensions in dp are aligned with key tuple size,
        if current doesnt need mod just return next recursion,
    ]

    Medium: 1049?, 221?, 1140?, 926?
    Hard: 446, 629, 1289
    Study: 309, 494, 97, 877, 474, 1911, 72
    Tricks: m1155



Greedy:
    Medium [
        Kadanes Algorithm,
        For circular use sliding window or max/min,
        Try heaps,
        use negatives for sorting tuples
    ]

    Medium: 918?, 45?, 1871!, 134?, 2439?, 763?, 950
    Hard: 135
    Study: 678, 1029



Intervals:
    Medium: 57?, 435



Other: 
    Prefix Sum, Monotomic Stack, Tries, 2D Tabulation