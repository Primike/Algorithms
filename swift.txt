Strings:
    string.prefix(i + 1)

    string.hasPrefix(subString)

    string.dropFirst()

    string.split(separator: "@")  - returns [SubString]

    string.components(separatedBy: " ")  - returns [String], does not remove consecutive 

    string.index(string.startIndex, offsetBy: i)

    string.replacingOccurrences(of: "x", with: "")

    left = string.startIndex 
    
    left = string.index(after: left)

    right = string.index(before: string.endIndex)

    string.isNumber/isLetter


Array:
    array.swapAt(left, right)

    var array: [[Int]] = Array(repeating: [], count: 5)

    let index = Int(letter.unicodeScalars.first!.value) - Int(Unicode.Scalar("a").value)


Dictionary:
    dict[key, default: []].append(string)

    dict.keys.contains(key)

    dict.values.allSatisfy { $0 == 0 }

    count += dict[key] ?? 0


Set:
    Set(array)

    hashSet.insert(item)

    !hashSet.contains(item)

    create hashable struct for tuples


Loops:
    for i in (0..<array.count).reversed()

    for (key, value) in dict

    for i in stride(from: array.count - 1, to: -1, by: -1) 


Functions:
    let totalSum = array.reduce(0, +)

    let sum = nums[left...right].reduce(0, +)

    let dict = array.reduce(into: [:]) { currentDict, item in
        currentDict[item, default: 0] += 1
    }

    let dict = array.reduce(into: [:]) { $0[$1, default: 0] += 1 }

    let dict = array.enumerated().reduce(into: [:]) { $0[$1.element] = $1.offset }
    let dict = array.enumerated().reduce(into: [Int: Int]()) { (dict, pair) in
        dict[pair.element] = pair.offset
    }

    let key = array.map { String($0) }.joined(separator: ",")

    string.filter { $0.isLetter || $0.isNumber }.lowercased()

    let doubleArray = Array(repeating: array, count: 2).flatMap { $0 }

    let arrayWithoutNil = arrayWithNil.compactMap { $0 }


NSCountedSet:
    var arrayCount = NSCountedSet(array: Array(string))

    arrayCount.count(for: letter)